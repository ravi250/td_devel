#!/usr/bin/ksh

#
# This is a wrapper for GCFR processes, which connect to database only
# without any tasks in the operating system.
#
# The connection to the database will be done by bteq and CLI
# The invoked sql script will have the call procedure command (only one)
# and the return code/text from this procedure execution is
# evaluated. Because not all errors in GCFR end the stored procedure
# with an error code. Some are finishing successful, but in fact they
# raised an error internally, but don't return with an error code.
# The return message from the stored procedure will indicate if the
# execution was successful or not.
#

Err() {
	echo "$*" >&2
	exit 1
}

Msg() {
	echo "$*" >&2
}

#
# check environment
#
[ -n "$ETC" ] || Err "*** environment no set ***"

id=$1
[ -n "$id" ] || Err "*** usage: Bteq name ***"
sql=$ETC/$id.sql
out=$TMPDIR/$id.out
out1=$TMPDIR/$id.out1
out2=$TMPDIR/$id.out2
[ -f "$sql" ] || Err "*** file $sql not found ***"
echo "PWD=${PWD}" 1>&2
which $sql 1>&2

#
# save old output files
#
[ -f $out1 ] && mv $out1 $out2
[ -f $out ]  && mv $out  $out1

cd $WORK

{
echo ".maxerror 4
.errorlevel (2631) severity 8
.set width 250
.set retry off
.set session charset \"utf8\"
.logon \${LOGON}"
cat $sql
echo ".exit"
} | VarSubst | bteq >$out 2>&1
ec=$?
Msg "*** bteq exit-code $ec ***"
[ $ec -le 2 ]  && ec=0
if [ $ec -gt 0 -a $ec -ne 126 ] 
then
	tail -10 $out
	Msg "*** bteq failed, exit code: $ec ***"
	exit $ec
fi

if [ $(egrep -c "Process Completed{0,1} Successfully" $out) -ne 1 ]
then
    ec=$(awk '/Process Failed/ {print $1}' $out)
    Msg "*** procedure successful, but return code not ok: $ec ***"
    exit 45
fi

exit $ec
